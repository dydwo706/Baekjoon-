0. 문자열 표현 : '' "" """ """

   "i eat %d apples", %3  _ 이렇게 편하게 작성할 수도 있엉. 값이 여러개면 %(3,4)이런식
   "one means {num } hello means {kor} yeah~" .format(kor="안녕", num="1") _ 이러면 괄호사이에 문자가 들어감.
   
   소수점 몇번째 자리까지~  _ %0.4f   
   앞 몇칸 띄우고 글자출력  _ %10s
   
1. //가 몫을 구하는 것
2. *input()을 해야 입력할 수 있음. 하지만 이는 문자열이기 때문에 int(input())을 해야 숫자로ㅇㅇ
    print("%d %s %d" %(1, 'str', 3))형식으로 ㅇ
   
   *print('%d%%'%a) 처럼 ''안에 %d, %f와 같이 %연산자가 쓰였으면 뒤에 또 %가 쓰일 때 %%두번 해줘야함.ex 백준4344
   
   ex) 별찍기
   print(' ' + '*')  같이 가운데 +를 사용하면 연속으로 출력할 수 있다.
   print(' ', '*')   같이 사용하면 공백이 두번 연속 생기기 때문에 주의!
   
-> <함수, method>
   x=map(a,b)       - b에 대해 a를 진행한다 ex) x=map(int,input() ) 입력값을 int
   round(실수,n)     - 소수점 n번째 자리까지만 표현
                    - n자리에 음수를 넣으면 정수자리에서 반올림ㄱㄴ
                    - 
   address.strip()     - strip()은  ex) address = ' 아 전역하고 싶다 ' 일 때 앞 뒤 공백을 없애줌
   address.split()     - split()은  공백을 기준으로 문자열을 분리 시킨다. ex) ['아','전역하고','싶다']
   address.startswith("아") - 얘는 괄호 안의 문자가 해당 문자열에 있는지 확인 답은 True
   " ".join(list)      - 리스트 값들 사이에 공백이 있는 문자열로 만들 수 있다.
3. 조건문 
   if ___:
      _____   (기본)
   elif ___ and/or ___:
      _____
   elif not ___:
      _____
   else :
      _____
      
4. 함수 - 함수에 input 이나 output이 없을 수도 있다. 전자의 경우엔 def 옆에 인자가 비어있는 것이고 후자의 경우는 출력값이 none이라고 뜸. 
   def ___(인자):
       _____
   
   def ____(__,__,__):
       _____
       return _
       
   **몇개의 인자를 넣을지 미정인 상태면 
     def sum_all (*args):
         sum =0
         for i in args:
            sum =sum+i
         return sum
     print(sum_all(1,2,3))
     이와 같이 *args라는 표현을 써서 정해지지 않은 여러 수를 입력 받을 수 있다. (굳이 args표현을 안 써도 되지만 통용되는 표현이다.)
     
5. 반복문
  5-1. while ____:    -> 실행한 조건 or True
           ___
           ___  (변수에 대한 증감 조건해줘야함)
  5-2. for i in range(종료값):
          ____
       for i in reversed(range(1,7)):   ->하면 6에서 1까지 감소하는 i를 얻을 수 잇다.
          ____                    
       for i in list:
          ____
       for i in range(시작, 종료, +-증감)
          ___   
          
       for i in range(3):
           if i>2:
              break           ->끝내기
           elif i<2:
              continue       -> 해당 위치에서 끝내고 다시 반복
           else :
              ___
              
        for i,val in enumerate(list):
            print(i,val)        하면 해당 원소의 번호와 원소값을 동시에 배출!
             
6. 리스트

x=[1,2,3]
y=['아앙', '잉', 5,6]
x+y 같은 연산 ㄱㄴ
x[1]=4 와 같이 값변환 ㄱㄴ
len(x) - 길이
sort(x) - 영구 정렬, 리턴값 none /// y=sorted(x)는 임시로 x를 정렬한 값을  y에 저장
sum(x) -  합
for n in x:
   print(n)    -> x리스트 값을 n에 담아
list[-1] 하면 맨 마지막 문자를 가져온다.

*슬라이싱_ a[:2] - 2미만 인덱스 나열
         a[2:] - 2이상 인덱스 나열
         a[::2] - 처음부터 끝까지 2칸 간격으로 나열 (a[::-1] 이건 뒤에서부터 읽ㄴ느거얌)
         ex) a=['a', 'b', 'c']
             a[0:1] = ['d','e']
             -> d,e,c
             
7. 튜플

 리스트랑 같음 차이점은 x =(1,2,3) 과 같이 괄호
 그리고 튜플은 값 변환이 안돼
 
 이중배열과 같은 형태 래스끼릿!
 ex__   list1=[1,2]
        list2=[3,4]
        tuple = (list1, list2)
        print(tuple)  --->     ([1,2], [3,4]) ㅇㅋ
 
8. dictionary _ 다른 언어의 hash, map, json과 같은 역할. 
8. dictionary _ 다른 언어의 hash, map, json과 같은 역할.
 key를 통해서 value
    "name" : "cho",
    0 : 20,
    1 : 30,
    }
 print(x["name"])
 print(x[0])
 print(x) 
 
 
 9. 함수 메소드
  
   * count(a) _ 문자열 안에 a의 개수를 세
   * find(a) _ 가장 앞엥 있는 a의 위치. 없으면 -1
   * ","join("abcd") _ 괄호안의 문자를 " "안의 문자로 쪼개서 나타냄 -> a,b,c,d
   * upper() / lower() _ 대소문자로 변환
   * replace("a", "b") _ 문자열 안의 a를 b로 변환
   ** split() _ 괄호안의 문자를 기준으로 문자열을 나눈다
      ex) a="a:b:c:d"   a.split(:) -> ['a','b','c','d']
   * append() _ 추가
   * sort() _ 정렬 ㄱㄴㄷ 123 abc 순으로
   * reverse() _ 뒤집기
   * insert(1,3) _ 1번쨰 인덱스에 3을 넣어라
   * remove(1) _ 1이라는 값을 제거
   * pop() - 마지막 놈을 내보내
   * extend(1,2,3) _ 마지막에 추가
